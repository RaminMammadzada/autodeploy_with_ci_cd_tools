version: 2.1

orbs:
  slack: circleci/slack@3.4.2

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/V5LXienVHY42J8jAzaHpYf/migration_<< parameters.workflow_id >>)
             if (( $SUCCESS == 1 ));
             then
                 cd ~/project/backend
                 npm install
                 npm run migrations:revert
             fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
      - destroy-environment
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
  
  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ad:1d:82:cf:ad:59:23:70:7b:df:12:b1:49:27:1e:3e"]
      - run:
          name: Install ansible
          command: |
            yum update
            amazon-linux-extras enable ansible2
            yum install -y ansible
      - run:
          name: Install other dependencies
          command: |
            yum install -y tar gzip ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
              echo "insecure" >> ~/.curlrc
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                  # If you are using kvdb.io, generate the bucket ID "V5LXienVHY42J8jAzaHpYf" in your local terminal first
                  curl https://kvdb.io/V5LXienVHY42J8jAzaHpYf/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install nodejs
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs
      - run:
          name: Install tar
          command: |
            yum install -y tar
      - run:
          name: Install gzip
          command: |
            yum install -y gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
   
  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ad:1d:82:cf:ad:59:23:70:7b:df:12:b1:49:27:1e:3e"]
      - run:
          name: Install nodejs
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs
      - run:
          name: Install tar
          command: |
            yum install -y tar
      - run:
          name: Install gzip
          command: |
            yum install -y gzip
      - run:
          name: Install ansible
          command: |
            yum update
            amazon-linux-extras enable ansible2
            yum install -y ansible     
      - attach_workspace:
          at: ~/ 
      - run:
          name: Deploy backend
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install nodejs
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs
      - run:
          name: Install ansible
          command: |
            yum update
            yum install -y nodejs curl
      - run:
          name: Get backend URL and backend smoke test.
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"

            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs 
      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            export OldWorkflowIDs=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowIDs: "${OldWorkflowIDs}"

            echo "export OldWorkflowIDs=${OldWorkflowIDs}" >> $BASH_ENV
            echo OldWorkflowIDs: "${OldWorkflowIDs}"

      - run:
          name: Remove old stacks and files
          command: |
            for ID in "${OldWorkflowIDs}"
            do
              OldWorkflowID=${ID: -7}
              echo OldWorkflowIDs: "${OldWorkflowIDs}"
              echo ID: "${ID}"
              echo OldWorkflowID: "${OldWorkflowID}"
              if [[ "${OldWorkflowID}" != "${CIRCLE_WORKFLOW_ID:0:7}" ]]
              then
                echo '-----------------  Delete Confirmed  -----------------'
                aws s3 rb --force s3://udapeople-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              else
                echo '-----------------  Cannot Cleanup  -----------------'
              fi
            done
            
      
workflows:
  default:
    jobs:
      # - build-frontend:
      #     context: slack-secrets
      # - build-backend:
      #     context: slack-secrets
      # - test-frontend:
      #     context: slack-secrets
      #     requires: [build-frontend]
      # - test-backend:
      #     context: slack-secrets
      #     requires: [build-backend]
      # - scan-frontend:
      #     context: slack-secrets
      #     requires: [build-frontend]
      # - scan-backend:
      #     context: slack-secrets
      #     requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend]
      #     # filters:
      #     #   branches:
      #     #     only: [main]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-frontend, deploy-backend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      - cleanup
          # requires: [ cloudfront-update]